{"ast":null,"code":"import firebase from\"firebase/app\";import{initializeApp}from\"firebase/app\";import{getAuth,auth}from\"firebase/auth\";import{createUserWithEmailAndPassword,signInWithEmailAndPassword,onAuthStateChanged,signOut}from\"firebase/auth\";import\"firebase/database\";import{getMessaging,onMessage}from\"firebase/messaging\";// import { getAnalytics } from \"firebase/analytics\";\nimport'firebase/messaging';// import admin from 'firebase-admin';\n// import { initializeApp,messaging} from \"firebase/compat/app\";\n// import { getAnalytics } from \"firebase/analytics\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nvar firebaseConfig={apiKey:\"AIzaSyAi0YLtt_K5OoKtJzm10_ukcLJgJnxU6eo\",authDomain:\"first-push-21b3f.firebaseapp.com\",projectId:\"first-push-21b3f\",storageBucket:\"first-push-21b3f.appspot.com\",messagingSenderId:\"1008842157586\",appId:\"1:1008842157586:web:c483b841f40e0c347a72cb\",measurementId:\"G-F5QM917MZW\"};// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);export default firebase;export var ss=firebase.auth();// export const f1=ss.createUserWithEmailAndPassword();\n// export const f2=ss.onAuthStateChanged();\n// export const f3=ss.signInWithEmailAndPassword();\n// export const f4=ss.signOut();\n// const analytics = getAnalytics(app);\nexport var mm=firebase.messaging();export var dd=firebase.database();export var getToken=function getToken(setTokenFound){return getToken(mm,{vapidKey:'BKShxs3d2HHzpB2Y7wX1cGP4gAdjR21M3j9wZ1bDap2RbDiTvlGb1-yS1qtZXwf4Glw81VZZmvdT1oz8hXrBwjU'}).then(function(currentToken){if(currentToken){console.log('current token for client: ',currentToken);setTokenFound(true);// Track the token -> client mapping, by sending to backend server\n// show on the UI that permission is secured\n}else{console.log('No registration token available. Request permission to generate one.');setTokenFound(false);// shows on the UI that permission is required \n}}).catch(function(err){console.log('An error occurred while retrieving token. ',err);// catch error while creating client token\n});};","map":{"version":3,"sources":["E:/React-Website/blog/src/Firebase.js"],"names":["firebase","initializeApp","getAuth","auth","createUserWithEmailAndPassword","signInWithEmailAndPassword","onAuthStateChanged","signOut","getMessaging","onMessage","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","ss","mm","messaging","dd","database","getToken","setTokenFound","vapidKey","then","currentToken","console","log","catch","err"],"mappings":"AAAA,MAAOA,CAAAA,QAAP,KAAqB,cAArB,CACA,OAASC,aAAT,KAA8B,cAA9B,CAEA,OAASC,OAAT,CAAiBC,IAAjB,KAA6B,eAA7B,CACA,OACEC,8BADF,CAEEC,0BAFF,CAGEC,kBAHF,CAIEC,OAJF,KAKO,eALP,CAMA,MAAO,mBAAP,CACA,OAASC,YAAT,CAAuBC,SAAvB,KAAwC,oBAAxC,CACA;AACA,MAAO,oBAAP,CACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA,GAAMC,CAAAA,cAAc,CAAG,CACrBC,MAAM,CAAE,yCADa,CAErBC,UAAU,CAAE,kCAFS,CAGrBC,SAAS,CAAE,kBAHU,CAIrBC,aAAa,CAAE,8BAJM,CAKrBC,iBAAiB,CAAE,eALE,CAMrBC,KAAK,CAAE,4CANc,CAOrBC,aAAa,CAAE,cAPM,CAAvB,CAUA;AACAjB,QAAQ,CAACC,aAAT,CAAuBS,cAAvB,EAIA,cAAeV,CAAAA,QAAf,CACA,MAAO,IAAMkB,CAAAA,EAAE,CAAClB,QAAQ,CAACG,IAAT,EAAT,CACP;AACA;AACA;AACA;AAEA;AACA,MAAO,IAAMgB,CAAAA,EAAE,CAACnB,QAAQ,CAACoB,SAAT,EAAT,CAEP,MAAO,IAAMC,CAAAA,EAAE,CAACrB,QAAQ,CAACsB,QAAT,EAAT,CACP,MAAO,IAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,aAAD,CAAmB,CACzC,MAAOD,CAAAA,QAAQ,CAACJ,EAAD,CAAK,CAACM,QAAQ,CAAE,yFAAX,CAAL,CAAR,CAAoHC,IAApH,CAAyH,SAACC,YAAD,CAAkB,CAChJ,GAAIA,YAAJ,CAAkB,CAChBC,OAAO,CAACC,GAAR,CAAY,4BAAZ,CAA0CF,YAA1C,EACAH,aAAa,CAAC,IAAD,CAAb,CACA;AACA;AACD,CALD,IAKO,CACLI,OAAO,CAACC,GAAR,CAAY,sEAAZ,EACAL,aAAa,CAAC,KAAD,CAAb,CACA;AACD,CACF,CAXM,EAWJM,KAXI,CAWE,SAACC,GAAD,CAAS,CAChBH,OAAO,CAACC,GAAR,CAAY,4CAAZ,CAA0DE,GAA1D,EACA;AACD,CAdM,CAAP,CAeD,CAhBM","sourcesContent":["import firebase from \"firebase/app\"\r\nimport { initializeApp } from \"firebase/app\";\r\n\r\nimport { getAuth,auth } from \"firebase/auth\";\r\nimport {\r\n  createUserWithEmailAndPassword,\r\n  signInWithEmailAndPassword,\r\n  onAuthStateChanged,\r\n  signOut,\r\n} from \"firebase/auth\";\r\nimport \"firebase/database\"\r\nimport { getMessaging, onMessage } from \"firebase/messaging\";\r\n// import { getAnalytics } from \"firebase/analytics\";\r\nimport 'firebase/messaging';\r\n// import admin from 'firebase-admin';\r\n// import { initializeApp,messaging} from \"firebase/compat/app\";\r\n// import { getAnalytics } from \"firebase/analytics\";\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAi0YLtt_K5OoKtJzm10_ukcLJgJnxU6eo\",\r\n  authDomain: \"first-push-21b3f.firebaseapp.com\",\r\n  projectId: \"first-push-21b3f\",\r\n  storageBucket: \"first-push-21b3f.appspot.com\",\r\n  messagingSenderId: \"1008842157586\",\r\n  appId: \"1:1008842157586:web:c483b841f40e0c347a72cb\",\r\n  measurementId: \"G-F5QM917MZW\"\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\n\r\n\r\nexport default firebase;\r\nexport const ss=firebase.auth();\r\n// export const f1=ss.createUserWithEmailAndPassword();\r\n// export const f2=ss.onAuthStateChanged();\r\n// export const f3=ss.signInWithEmailAndPassword();\r\n// export const f4=ss.signOut();\r\n\r\n// const analytics = getAnalytics(app);\r\nexport const mm=firebase.messaging();\r\n\r\nexport const dd=firebase.database();\r\nexport const getToken = (setTokenFound) => {\r\n  return getToken(mm, {vapidKey: 'BKShxs3d2HHzpB2Y7wX1cGP4gAdjR21M3j9wZ1bDap2RbDiTvlGb1-yS1qtZXwf4Glw81VZZmvdT1oz8hXrBwjU'}).then((currentToken) => {\r\n    if (currentToken) {\r\n      console.log('current token for client: ', currentToken);\r\n      setTokenFound(true);\r\n      // Track the token -> client mapping, by sending to backend server\r\n      // show on the UI that permission is secured\r\n    } else {\r\n      console.log('No registration token available. Request permission to generate one.');\r\n      setTokenFound(false);\r\n      // shows on the UI that permission is required \r\n    }\r\n  }).catch((err) => {\r\n    console.log('An error occurred while retrieving token. ', err);\r\n    // catch error while creating client token\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}