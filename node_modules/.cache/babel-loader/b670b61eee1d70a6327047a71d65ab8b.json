{"ast":null,"code":"var _jsxFileName = \"E:\\\\React-Website\\\\blog\\\\src\\\\components\\\\Autocomplete.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from \"react-places-autocomplete\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AutoComplete() {\n  _s();\n\n  const [address, setAddress] = React.useState(\"\");\n  const [coordinates, setCoordinates] = React.useState({\n    lat: null,\n    lng: null\n  });\n\n  const handleSelect = async value => {\n    const results = await geocodeByAddress(value);\n    const latLng = await getLatLng(results[0]);\n    setAddress(value);\n    setCoordinates(latLng);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(PlacesAutocomplete, {\n      value: address,\n      onChange: setAddress,\n      onSelect: handleSelect,\n      children: ({\n        getInputProps,\n        suggestions,\n        getSuggestionItemProps,\n        loading\n      }) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Latitude: \", coordinates.lat]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Longitude: \", coordinates.lng]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...getInputProps({\n            placeholder: \"Type address\"\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"...loading\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 26\n          }, this) : null, suggestions.map(suggestion => {\n            const style = {\n              backgroundColor: suggestion.active ? \"#41b6e6\" : \"#fff\"\n            };\n            return /*#__PURE__*/_jsxDEV(\"div\", { ...getSuggestionItemProps(suggestion, {\n                style\n              }),\n              children: suggestion.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 19\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AutoComplete, \"3tfHOfFsCQ5buIs4iWYNpuYfm3o=\");\n\n_c = AutoComplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"AutoComplete\");","map":{"version":3,"sources":["E:/React-Website/blog/src/components/Autocomplete.js"],"names":["React","PlacesAutocomplete","geocodeByAddress","getLatLng","AutoComplete","address","setAddress","useState","coordinates","setCoordinates","lat","lng","handleSelect","value","results","latLng","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","map","suggestion","style","backgroundColor","active","description"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,kBAAP,IACEC,gBADF,EAEEC,SAFF,QAGO,2BAHP;;AAKA,eAAe,SAASC,YAAT,GAAwB;AAAA;;AACrC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,KAAK,CAACO,QAAN,CAAe,EAAf,CAA9B;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCT,KAAK,CAACO,QAAN,CAAe;AACnDG,IAAAA,GAAG,EAAE,IAD8C;AAEnDC,IAAAA,GAAG,EAAE;AAF8C,GAAf,CAAtC;;AAKA,QAAMC,YAAY,GAAG,MAAMC,KAAN,IAAe;AAClC,UAAMC,OAAO,GAAG,MAAMZ,gBAAgB,CAACW,KAAD,CAAtC;AACA,UAAME,MAAM,GAAG,MAAMZ,SAAS,CAACW,OAAO,CAAC,CAAD,CAAR,CAA9B;AACAR,IAAAA,UAAU,CAACO,KAAD,CAAV;AACAJ,IAAAA,cAAc,CAACM,MAAD,CAAd;AACD,GALD;;AAOA,sBACE;AAAA,2BACE,QAAC,kBAAD;AACE,MAAA,KAAK,EAAEV,OADT;AAEE,MAAA,QAAQ,EAAEC,UAFZ;AAGE,MAAA,QAAQ,EAAEM,YAHZ;AAAA,gBAKG,CAAC;AAAEI,QAAAA,aAAF;AAAiBC,QAAAA,WAAjB;AAA8BC,QAAAA,sBAA9B;AAAsDC,QAAAA;AAAtD,OAAD,kBACC;AAAA,gCACE;AAAA,mCAAcX,WAAW,CAACE,GAA1B;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,oCAAeF,WAAW,CAACG,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,eAIE,sBAAWK,aAAa,CAAC;AAAEI,YAAAA,WAAW,EAAE;AAAf,WAAD;AAAxB;AAAA;AAAA;AAAA;AAAA,gBAJF,eAME;AAAA,qBACGD,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAH,GAA2B,IADrC,EAGGF,WAAW,CAACI,GAAZ,CAAgBC,UAAU,IAAI;AAC7B,kBAAMC,KAAK,GAAG;AACZC,cAAAA,eAAe,EAAEF,UAAU,CAACG,MAAX,GAAoB,SAApB,GAAgC;AADrC,aAAd;AAIA,gCACE,oBAASP,sBAAsB,CAACI,UAAD,EAAa;AAAEC,gBAAAA;AAAF,eAAb,CAA/B;AAAA,wBACGD,UAAU,CAACI;AADd;AAAA;AAAA;AAAA;AAAA,oBADF;AAKD,WAVA,CAHH;AAAA;AAAA;AAAA;AAAA;AAAA,gBANF;AAAA;AAAA;AAAA;AAAA;AAAA;AANJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAkCD;;GAhDuBtB,Y;;KAAAA,Y","sourcesContent":["import React from \"react\";\r\nimport PlacesAutocomplete, {\r\n  geocodeByAddress,\r\n  getLatLng\r\n} from \"react-places-autocomplete\";\r\n\r\nexport default function AutoComplete() {\r\n  const [address, setAddress] = React.useState(\"\");\r\n  const [coordinates, setCoordinates] = React.useState({\r\n    lat: null,\r\n    lng: null\r\n  });\r\n\r\n  const handleSelect = async value => {\r\n    const results = await geocodeByAddress(value);\r\n    const latLng = await getLatLng(results[0]);\r\n    setAddress(value);\r\n    setCoordinates(latLng);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <PlacesAutocomplete\r\n        value={address}\r\n        onChange={setAddress}\r\n        onSelect={handleSelect}\r\n      >\r\n        {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\r\n          <div >\r\n            <p>Latitude: {coordinates.lat}</p>\r\n            <p>Longitude: {coordinates.lng}</p>\r\n\r\n            <input {...getInputProps({ placeholder: \"Type address\" })} />\r\n\r\n            <div>\r\n              {loading ? <div>...loading</div> : null}\r\n\r\n              {suggestions.map(suggestion => {\r\n                const style = {\r\n                  backgroundColor: suggestion.active ? \"#41b6e6\" : \"#fff\"\r\n                };\r\n\r\n                return (\r\n                  <div {...getSuggestionItemProps(suggestion, { style })}>\r\n                    {suggestion.description}\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </PlacesAutocomplete>\r\n    </div>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}